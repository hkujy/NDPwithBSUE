!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ExampleIndex	.\main.py	/^ExampleIndex = 2$/;"	v
IterClass	.\myclass.py	/^class IterClass:$/;"	c
LineClass	.\myclass.py	/^class LineClass:$/;"	c
MatPlt	.\plot.py	/^import matplotlib.pyplot as MatPlt$/;"	i
MatPlt	.\plot_trajectory.py	/^import matplotlib.pyplot as MatPlt$/;"	i
OdClass	.\myclass.py	/^class OdClass:$/;"	c
ParaClass	.\ParaClass.py	/^class ParaClass:$/;"	c
ParaClass	.\main.py	/^import ParaClass$/;"	i
ParaClass	.\plot.py	/^import ParaClass$/;"	i
ParaClass	.\plot_trajectory.py	/^import ParaClass$/;"	i
PathClass	.\myclass.py	/^class PathClass:$/;"	c
PathNodeClass	.\myclass.py	/^class PathNodeClass:$/;"	c
RunClass	.\myclass.py	/^class RunClass:$/;"	c
RunDebugExe	.\main.py	/^RunDebugExe = True$/;"	v
RunReleaseExe	.\main.py	/^RunReleaseExe = False$/;"	v
SolClass	.\myclass.py	/^class SolClass:$/;"	c
TestCaseClass	.\myclass.py	/^class TestCaseClass:$/;"	c
TurnParaClass	.\myclass.py	/^class TurnParaClass:$/;"	c
__init__	.\ParaClass.py	/^    def __init__(self, from_folder):$/;"	m	class:ParaClass
__init__	.\myclass.py	/^    def __init__(self):$/;"	m	class:LineClass
__init__	.\myclass.py	/^    def __init__(self):$/;"	m	class:RunClass
__init__	.\myclass.py	/^    def __init__(self):$/;"	m	class:TestCaseClass
__init__	.\myclass.py	/^    def __init__(self, id):$/;"	m	class:IterClass
__init__	.\myclass.py	/^    def __init__(self, id):$/;"	m	class:OdClass
__init__	.\myclass.py	/^    def __init__(self, iter, solnum, od, id):$/;"	m	class:PathClass
__init__	.\myclass.py	/^    def __init__(self, node, wait, line, veh, seat, _arrtime ,_dep_time):$/;"	m	class:PathNodeClass
__init__	.\myclass.py	/^    def __init__(self, remark_str):$/;"	m	class:TurnParaClass
__init__	.\myclass.py	/^    def __init__(self, solnum):$/;"	m	class:SolClass
class	.\main.py	/^import myclass as mc  # my class$/;"	i
copyfile	.\main.py	/^from shutil import copyfile$/;"	i
datetime	.\main.py	/^import datetime$/;"	i
double_check	.\main.py	/^double_check = "Null"   # no double check and run all the cases$/;"	v
find_plot_position	.\plot.py	/^def find_plot_position(path:mc.PathClass):$/;"	f
get_board_condition	.\myclass.py	/^    def get_board_condition(self):$/;"	m	class:PathNodeClass
go	.\plot.py	/^import plotly.graph_objs as go$/;"	i
go	.\plot_trajectory.py	/^import plotly.graph_objs as go$/;"	i
inspect	.\set_para.py	/^import inspect$/;"	i
matplotlib	.\plot.py	/^import matplotlib.pyplot as MatPlt$/;"	i
matplotlib	.\plot.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	.\plot_trajectory.py	/^import matplotlib.pyplot as MatPlt$/;"	i
matplotlib	.\plot_trajectory.py	/^import matplotlib.pyplot as plt$/;"	i
mc	.\main.py	/^import myclass as mc  # my class$/;"	i
mc	.\plot.py	/^import myclass as mc$/;"	i
mc	.\plot_trajectory.py	/^import myclass as mc$/;"	i
mc	.\read_results.py	/^import myclass as mc$/;"	i
mc	.\set_para.py	/^import myclass as mc$/;"	i
mp	.\main.py	/^import plot as mp  # my plot$/;"	i
my	.\main.py	/^import myclass as mc  # my class$/;"	i
my	.\main.py	/^import plot as mp  # my plot$/;"	i
now	.\main.py	/^    now = datetime.datetime.now()$/;"	v
np	.\plot.py	/^import numpy as np$/;"	i
np	.\plot_trajectory.py	/^import numpy as np$/;"	i
np	.\read_results.py	/^import numpy as np$/;"	i
nx	.\plot.py	/^import networkx as nx$/;"	i
nx	.\plot_trajectory.py	/^import networkx as nx$/;"	i
os	.\main.py	/^import os$/;"	i
os	.\set_para.py	/^import os, sys$/;"	i
pd	.\ParaClass.py	/^import pandas as pd$/;"	i
pd	.\plot.py	/^import pandas as pd$/;"	i
pd	.\plot_trajectory.py	/^import pandas as pd$/;"	i
pd	.\read_results.py	/^import pandas as pd$/;"	i
plot	.\main.py	/^import plot as mp  # my plot$/;"	i
plot_fre	.\plot.py	/^def plot_fre(data:mc.TestCaseClass, sol:mc.SolClass):$/;"	f
plot_global	.\plot.py	/^def plot_global(data:mc.TestCaseClass,para:ParaClass):$/;"	f
plot_main	.\plot.py	/^def plot_main(data:mc.TestCaseClass, para:ParaClass):$/;"	f
plot_one_sol	.\plot.py	/^def plot_one_sol(data: mc.TestCaseClass):$/;"	f
plot_path	.\plot.py	/^def plot_path(path:mc.PathClass,data:mc.TestCaseClass):$/;"	f
plot_path_traj	.\plot_trajectory.py	/^def plot_path_traj(data:mc.TestCaseClass, sol:mc.SolClass):$/;"	f
plot_prob_vs_cost_one	.\plot.py	/^def plot_prob_vs_cost_one(data:mc.TestCaseClass, sol:mc.SolClass):$/;"	f
plot_schedule	.\plot.py	/^def plot_schedule(data: mc.TestCaseClass, sol: mc.SolClass):$/;"	f
plot_sol_path	.\plot.py	/^def plot_sol_path(sol:mc.SolClass, data:mc.TestCaseClass):$/;"	f
plot_train	.\plot.py	/^from plot_trajectory import plot_train$/;"	i
plot_train	.\plot_trajectory.py	/^def plot_train(data:mc.TestCaseClass, sol:mc.SolClass):$/;"	f
plotly	.\plot.py	/^import plotly$/;"	i
plotly	.\plot.py	/^import plotly.graph_objs as go$/;"	i
plotly	.\plot_trajectory.py	/^import plotly$/;"	i
plotly	.\plot_trajectory.py	/^import plotly.graph_objs as go$/;"	i
plotly	.\set_para.py	/^import plotly$/;"	i
plotly	.\set_para.py	/^import plotly.plotly as py$/;"	i
plt	.\plot.py	/^import matplotlib.pyplot as plt$/;"	i
plt	.\plot_trajectory.py	/^import matplotlib.pyplot as plt$/;"	i
py	.\set_para.py	/^import plotly.plotly as py$/;"	i
read_flow	.\read_results.py	/^def read_flow(folder):$/;"	f
read_fre	.\read_results.py	/^def read_fre(folder, data:mc.TestCaseClass):$/;"	f
read_main	.\main.py	/^from read_results import read_main$/;"	i
read_main	.\read_results.py	/^def read_main(folder):$/;"	f
read_od	.\read_results.py	/^def read_od(folder):$/;"	f
read_optimal_sol	.\read_results.py	/^def read_optimal_sol(folder, case_data):$/;"	f
read_path_nodes	.\read_results.py	/^def read_path_nodes(folder, data:mc.TestCaseClass):$/;"	f
read_schedule	.\read_results.py	/^def read_schedule(folder, data: mc.TestCaseClass):$/;"	f
remark	.\main.py	/^    remark = input("Remarks:")$/;"	v
set_3link_para_bcm	.\main.py	/^def set_3link_para_bcm(remarks: str):$/;"	f
set_case	.\main.py	/^from set_para import set_case$/;"	i
set_case	.\set_para.py	/^def set_case(case_index, TurnParaList:mc.TurnParaClass, testId, ExampleIndex):$/;"	f
set_turn_para_bcm	.\main.py	/^def set_turn_para_bcm(remarks: str):$/;"	f
set_turn_para_break_points	.\main.py	/^def set_turn_para_break_points(remarks: str):$/;"	f
set_turn_para_fre_interval	.\main.py	/^def set_turn_para_fre_interval(remarks:str):$/;"	f
set_turn_para_operation_cost	.\main.py	/^def set_turn_para_operation_cost(remarks: str):$/;"	f
set_turn_para_stand_beta	.\main.py	/^def set_turn_para_stand_beta(remarks: str):$/;"	f
set_turn_para_sue	.\main.py	/^def set_turn_para_sue(remarks: str):$/;"	f
set_turn_para_theta	.\main.py	/^def set_turn_para_theta(remarks: str):$/;"	f
shutil	.\set_para.py	/^import shutil$/;"	i
sys	.\main.py	/^import sys$/;"	i
sys	.\set_para.py	/^import os, sys$/;"	i
testId	.\main.py	/^                testId = testId + 1$/;"	v
testId	.\main.py	/^            testId = testId + 1$/;"	v
testId	.\main.py	/^    testId = 0$/;"	v
test_one_case	.\main.py	/^def test_one_case(turn_para: mc.TurnParaClass, test_index, testID):$/;"	f
the	.\myclass.py	/^        self.visit_node = []  # the class the path node class$/;"	c	function:PathClass.__init__
tune	.\main.py	/^            tune = set_turn_para_bcm(remark)$/;"	v
tune	.\main.py	/^            tune = set_turn_para_break_points(remark)$/;"	v
tune	.\main.py	/^            tune = set_turn_para_operation_cost(remark)$/;"	v
tune	.\main.py	/^            tune = set_turn_para_stand_beta(remark)$/;"	v
tune	.\main.py	/^            tune = set_turn_para_theta(remark)$/;"	v
tune	.\main.py	/^        tune = set_3link_para_bcm(remark)$/;"	v
tune	.\main.py	/^        tune = set_turn_para_fre_interval(remark)$/;"	v
